# -*- coding: utf-8 -*-
"""lstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HXjrv6C_aTi_1JkVyQgWTvqj_RpbO2_I
"""

import pdfplumber
import csv
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from translate import Translator


def extract_pdf_text(pdf_path):
    full_text = ""
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                full_text += page.extract_text()
    except Exception as e:
        print(f"Error reading PDF: {pdf_path}. Error: {e}")
    return full_text


def translate_content(content, source_lang='mk', target_lang='en'):
    if not content.strip():
        print("Skipping translation: No text provided.")
        return ""
    translator = Translator(from_lang=source_lang, to_lang=target_lang)
    try:
        return translator.translate(content)
    except Exception as e:
        print(f"Error translating content: {e}")
        return ""


def analyze_sentiment(content):
    sentiment_analyzer = SentimentIntensityAnalyzer()
    sentiment_scores = sentiment_analyzer.polarity_scores(content)
    return sentiment_scores


def stock_advice_based_on_sentiment(sentiment_scores):
    compound_score = sentiment_scores['compound']

    if compound_score > 0.1:
        recommendation = "Buy"
        predicted_change = "will increase"
    elif compound_score < -0.1:
        recommendation = "Sell"
        predicted_change = "will decrease"
    else:
        recommendation = "Hold"
        predicted_change = "will remain stable"

    return recommendation, predicted_change


def process_issuer_reports(issuer_name):
    pdf_paths = [
        f'sentimentalAnalysis/{issuer_name}/{issuer_name}.pdf',
        f'sentimentalAnalysis/{issuer_name}/{issuer_name}2023.pdf',
        f'sentimentalAnalysis/{issuer_name}/{issuer_name}2022.pdf'
    ]

    aggregated_text = ""
    for pdf_path in pdf_paths:
        print(f"Extracting content from {pdf_path}...")
        pdf_content = extract_pdf_text(pdf_path)
        aggregated_text += pdf_content + " "

    if aggregated_text.strip():
        print(f"Translating content for sentiment analysis...")
        translated_content = translate_content(aggregated_text)

        print(f"Analyzing sentiment for {issuer_name}...")
        sentiment_scores = analyze_sentiment(translated_content)

        recommendation, predicted_price_change = stock_advice_based_on_sentiment(sentiment_scores)

        description = (
            f"Sentiment scores: {sentiment_scores}\n"
            f"Stock forecast: Price {predicted_price_change}.\n"
            f"Recommendation: {recommendation} shares."
        )

        result = {
            "issuer": issuer_name,
            "description": description
        }

        return result
    else:
        return {
            "issuer": issuer_name,
            "description": "Error processing or no content extracted from PDF."
        }


def analyze_reports_for_all_issuers(issuers_list, output_csv):
    print(f"Starting analysis for {len(issuers_list)} issuers...")

    with open(output_csv, 'w', newline='', encoding='utf-8') as csvfile:
        csv_writer = csv.DictWriter(csvfile, fieldnames=["Issuer Name", "Description"])
        csv_writer.writeheader()

        for issuer in issuers_list:
            result = process_issuer_reports(issuer)
            csv_writer.writerow({"Issuer Name": result['issuer'], "Description": result['description']})

    print(f"Results have been saved to {output_csv}")


def main():
    issuers_list = ['ALK', 'CKB', 'GRNT', 'KMB', 'MPT', 'MSTIL', 'MTUR', 'REPL',
                    'STB', 'SBT', 'TEL', 'TTK', 'TNB', 'UNI', 'VITA', 'OKTA']

    output_csv = 'issuer_analysis_results.csv'

    analyze_reports_for_all_issuers(issuers_list, output_csv)

if __name__ == '__main__':
    main()